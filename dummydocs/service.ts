import { DocProps } from '@/app/doc/[docid]/page'
import fs from 'fs/promises'
import path from 'path'

// ÎçîÎØ∏ doc READ IO
const getFullFiles = async (): Promise<DocProps[]> => {
    try {
        const filePath = path.join(process.cwd(), 'dummydocs', 'dummyDocs.json')
        const files = await fs.readFile(filePath, 'utf-8')
        return JSON.parse(files)
    } catch (error) {
        return []
    }
}

// ÎçîÎØ∏ doc INSERT IO
const writeDoc = async (docs: DocProps[]) => fs.writeFile(path.join(process.cwd(), 'dummydocs', 'dummyDocs.json'), JSON.stringify(docs))

// ÎçîÎØ∏ doc ReadÏãúÏóê Ïù¥Î¶Ñ Î¨∏ÏûêÏó¥ÏùÑ Ï≤òÎ¶¨Ìï† Regexp
// +, ? Îì±Îì± \Î∂ôÏó¨ÏÑú Î¶¨ÌÑ¥
const escapeRegExp = (string: string) => {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
}

// ÎçîÎØ∏ doc ÌéòÏù¥Ïßï Î¶¨Ïä§Ìä∏ Ï∂úÎ†•
export const findDocsWithPageable = async (page: number, cnt: number) => {
    const docs = await getFullFiles()
    return { data: docs.splice(cnt * (page - 1), cnt), total: docs.length + cnt }
}

// ÎçîÎØ∏ doc docidÍ∏∞Ï§ÄÏúºÎ°ú READ, ÏûêÎèô ÎßÅÌÅ¨Ï≤òÎ¶¨Î•º ÏúÑÌï¥ docÏ†ÑÏ≤¥Î™©Î°ù + replaceÎ°ú Ìï¥Îãπ ÌÉÄÏù¥ÌãÄÏùÑ anchorÎ°ú replacing
// ÌÖåÏä§Ìä∏ Í∏∞Ï§Ä 20ÎßåÏûê
// „Ñ¥ api Ï≤òÎ¶¨ 400ms +-10,
// „Ñ¥ Î†åÎçîÎßÅÍπåÏßÄ 1~2.5Ï¥à
export const findDocByDocid = async (docid: string, page: number | string) => {
    try {
        const docs = await getFullFiles()
        const targetDoc = docs.find((ele) => ele.docid.toString() === docid)
        if (targetDoc) {
            docs.forEach((ele) => {
                if (ele.title !== targetDoc.title) {
                    const regex = new RegExp(`\\b${escapeRegExp(ele.title)}\\b`, 'g')
                    targetDoc.description = targetDoc.description.replace(regex, `<a class='border-b' href="/doc/${ele.docid}?page=${page}">${ele.title} üîó</a>`)
                }
            })
        }
        return targetDoc
    } catch (error) {
        console.error('Error fetching documents:', error)
        return null
    }
}

// ÎçîÎØ∏ doc Ï∂îÍ∞Ä
export const insertDoc = async (doc: DocProps): Promise<void> => {
    try {
        const docs = await getFullFiles()
        docs.push(doc)
        await writeDoc(docs)
    } catch (error) {
        console.error('Error inserting document:', error)
    }
}

// ÎçîÎØ∏ doc ÏóÖÎç∞Ïù¥Ìä∏
export const updateDoc = async (doc: DocProps): Promise<void> => {
    try {
        const docs = await getFullFiles()
        const index = docs.findIndex((ele) => ele.docid === doc.docid)
        if (index !== -1) {
            docs[index] = doc
            await writeDoc(docs)
        }
    } catch (error) {
        console.error('Error updating document:', error)
    }
}

// ÎçîÎØ∏ doc ÏÇ≠Ï†ú
export const deleteDoc = async (docid: string): Promise<void> => {
    try {
        const docs = await getFullFiles()
        const index = docs.findIndex((ele) => ele.docid === docid)
        if (index !== -1) {
            docs.splice(index, 1)
            await writeDoc(docs)
        }
    } catch (error) {
        console.error('Error deleting document:', error)
    }
}
